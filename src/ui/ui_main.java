/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import cls.mangga;
import db.ExecutionManager;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.opencv.core.*;
import org.opencv.highgui.Highgui;
import org.opencv.highgui.VideoCapture;
import org.opencv.imgproc.Imgproc;

/**
 *
 * @author Hades
 */
public class ui_main extends javax.swing.JFrame {

    public BufferedImage imageTest;
    public BufferedImage imageHSV;
    public BufferedImage imageObject;
    public JFileChooser choosenFile = new JFileChooser();
    public double h_test;
    public double s_test;
    public double v_test;
    private boolean isLoaded;

    /**
     * Creates new form ui_main
     */
    public ui_main() {
        initComponents();
        logFileConfig();
        setLocationRelativeTo(this);
        isLoaded = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bntGroupModelBuah = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        panel_image = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btn_capture = new javax.swing.JButton();
        btn_browse = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        rd_kupas = new javax.swing.JRadioButton();
        rd_belumkupas = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        btn_dataTraining = new javax.swing.JButton();
        btn_execKNN = new javax.swing.JButton();
        btn_execSVM = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        panel_h = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        panel_cropped = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_knn = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_svm = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        panel_image.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout panel_imageLayout = new javax.swing.GroupLayout(panel_image);
        panel_image.setLayout(panel_imageLayout);
        panel_imageLayout.setHorizontalGroup(
            panel_imageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel_imageLayout.setVerticalGroup(
            panel_imageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );

        jPanel4.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        btn_capture.setText("Capture");
        btn_capture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_captureActionPerformed(evt);
            }
        });
        jPanel4.add(btn_capture);

        btn_browse.setText("Browse");
        btn_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_browseActionPerformed(evt);
            }
        });
        jPanel4.add(btn_browse);

        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        bntGroupModelBuah.add(rd_kupas);
        rd_kupas.setText("Terkupas");

        bntGroupModelBuah.add(rd_belumkupas);
        rd_belumkupas.setSelected(true);
        rd_belumkupas.setText("Belum Terkupas");

        jLabel1.setText("Keadaan Buah untuk Diklasifikasi");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(rd_kupas)
                        .addGap(18, 18, 18)
                        .addComponent(rd_belumkupas))
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rd_kupas)
                    .addComponent(rd_belumkupas))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel11.setLayout(new java.awt.GridLayout(1, 0));

        btn_dataTraining.setText("Data Training");
        btn_dataTraining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_dataTrainingActionPerformed(evt);
            }
        });
        jPanel11.add(btn_dataTraining);

        btn_execKNN.setText("Execute KNN");
        btn_execKNN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_execKNNActionPerformed(evt);
            }
        });
        jPanel11.add(btn_execKNN);

        btn_execSVM.setText("Execute SVM");
        btn_execSVM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_execSVMActionPerformed(evt);
            }
        });
        jPanel11.add(btn_execSVM);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel2.setText("Panel Kontrol");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                    .addComponent(panel_image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(panel_image, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        panel_h.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout panel_hLayout = new javax.swing.GroupLayout(panel_h);
        panel_h.setLayout(panel_hLayout);
        panel_hLayout.setHorizontalGroup(
            panel_hLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );
        panel_hLayout.setVerticalGroup(
            panel_hLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );

        jLabel4.setText("Image HSV");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(panel_h, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_h, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        panel_cropped.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout panel_croppedLayout = new javax.swing.GroupLayout(panel_cropped);
        panel_cropped.setLayout(panel_croppedLayout);
        panel_croppedLayout.setHorizontalGroup(
            panel_croppedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );
        panel_croppedLayout.setVerticalGroup(
            panel_croppedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );

        jLabel3.setText("Cropped Image");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(panel_cropped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_cropped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel12.setLayout(new java.awt.GridLayout(2, 1, 0, 10));

        txt_knn.setColumns(20);
        txt_knn.setRows(5);
        jScrollPane1.setViewportView(txt_knn);

        jPanel12.add(jScrollPane1);

        txt_svm.setColumns(20);
        txt_svm.setRows(5);
        jScrollPane2.setViewportView(txt_svm);

        jPanel12.add(jScrollPane2);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_captureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_captureActionPerformed
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        VideoCapture camera = new VideoCapture(0);
        if (!camera.isOpened()) {
            JOptionPane.showMessageDialog(null, "Error ! Cannot Open Camera");
            System.out.println("Error !, Cannot Open Camera");
        } else {
            Mat frame = new Mat();
            while (true) {
                if (camera.read(frame)) {
                    try {
                        JOptionPane.showMessageDialog(null, "Captured");
                        System.out.println("Frame Obtained");
                        System.out.println("Captured Frame Width " + frame.width() + " Height " + frame.height());
                        Highgui.imwrite("image_test.jpg", frame);
                        System.out.println("Image has been saved with name image_captured.jpg");
                        File input = new File("image_test.jpg");
                        imageTest = ImageIO.read(input);
                        //Detect Object
                        detectObject();
                        //HSV stuff
                        convertImage2HSV();
                        // Show Original Image To Panel
                        Graphics g = panel_image.getGraphics();
                        g.drawImage(imageTest, 0, 0, 320, 240, 0, 0, imageTest.getWidth(), imageTest.getHeight(), null);

                        break;
                    } catch (IOException ex) {
                        Logger.getLogger(ui_main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        camera.release();
    }//GEN-LAST:event_btn_captureActionPerformed

    private void btn_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_browseActionPerformed
        txt_svm.setText("SVM METHOD OUTPUT \n===============================\n\n");
        txt_knn.setText("KNN METHOD OUTPUT \n===============================\n\n");
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        h_test = 0.0;
        s_test = 0.0;
        v_test = 0.0;
        try {
            if (choosenFile.showOpenDialog(null) == 0) {
                //Select File
                File input = new File("");
                input = choosenFile.getSelectedFile();
                imageTest = ImageIO.read(input);

                txt_svm.append("Memproses ...\n\n");
                txt_knn.append("Memproses ...\n\n");
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        loadImage();
                    }

                }).start();
            }

        } catch (IOException ex) {
            Logger.getLogger(ui_main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_browseActionPerformed

    private void btn_execKNNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_execKNNActionPerformed
        int rank = 0;
        try {
            rank = Integer.parseInt(JOptionPane.showInputDialog("Masukkan Ranking"));
        } catch (Exception e) {
            //Do Nothing
        }
        if (rank != 0) {
            KNearestNeighborMethod(rank);
        }
    }//GEN-LAST:event_btn_execKNNActionPerformed

    private void btn_execSVMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_execSVMActionPerformed
        txt_svm.append("Memproses ...\n\n");
        new Thread(new Runnable() {
            @Override
            public void run() {
                SupportVectorMachineMethod();
            }

        }).start();

    }//GEN-LAST:event_btn_execSVMActionPerformed

    private void btn_dataTrainingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_dataTrainingActionPerformed
        ui_training train = new ui_training();
        train.setVisible(true);
    }//GEN-LAST:event_btn_dataTrainingActionPerformed

    //Our Methods LOL
    private void loadImage() {
        try {
            // Show Original Image To Panel
            Graphics g = panel_image.getGraphics();
            g.drawImage(imageTest, 0, 0, 320, 240, 0, 0, imageTest.getWidth(), imageTest.getHeight(), null);
            isLoaded = true;

            //Make a copy of image test
            File out = new File("image_test.jpg");
            ImageIO.write(imageTest, "jpg", out);

            //Detect Object
            detectObject();

            //Convert to HSV
            convertImage2HSV();

            //Get Sample from image
            getSampleImage();

            double[] hsv = RGBtoHSV();
            h_test = hsv[0];
            s_test = hsv[1];
            v_test = hsv[2];
        } catch (IOException ex) {
            Logger.getLogger(ui_main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void convertGrayscale() {
        //Convert To Grayscale
        byte[] data = ((DataBufferByte) imageTest.getRaster().getDataBuffer()).getData();
        Mat mat = new Mat(imageTest.getHeight(), imageTest.getWidth(), CvType.CV_8UC3);
        mat.put(0, 0, data);
        Mat mat1 = new Mat(imageTest.getHeight(), imageTest.getWidth(), CvType.CV_8UC1);
        Imgproc.cvtColor(mat, mat1, Imgproc.COLOR_RGB2GRAY);
        byte[] data1 = new byte[mat1.rows() * mat1.cols() * (int) (mat1.elemSize())];
        mat1.get(0, 0, data1);
        BufferedImage image1 = new BufferedImage(mat1.cols(), mat1.rows(), BufferedImage.TYPE_BYTE_GRAY);
        image1.getRaster().setDataElements(0, 0, mat1.cols(), mat1.rows(), data1);
        File ouptut = new File("image_grayscale.jpg");
        try {
            ImageIO.write(imageTest, "jpg", ouptut);
            System.out.println("Image has been saved with name image_grayscale.jpg");
        } catch (IOException ex) {
            Logger.getLogger(ui_main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void detectObject() {
        try {
            Process p = Runtime.getRuntime().exec("python ObjectDetection.py");
            String s = null;
            BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
            while ((s = stdInput.readLine()) != null) {
                System.out.println(s);
            }
            File fileHSV = new File("image_object.png");
            imageObject = ImageIO.read(fileHSV);

            // Show Object Image To Panel
            Graphics g0 = panel_cropped.getGraphics();
            g0.drawImage(imageObject, 0, 0, 320, 240, 0, 0, imageObject.getWidth(), imageObject.getHeight(), null);
        } catch (IOException ex) {
            Logger.getLogger(ui_main.class.getName()).log(Level.SEVERE, null, ex);
            writeLog(ex.toString());
            JOptionPane.showMessageDialog(null, "Too many objects detected, chose another image or check error log");
        }
    }

    public void getSampleImage() {
        try {
            Mat imgOri = Highgui.imread("image_object.png");
            int x_pos = Math.round(imgOri.width() / 2) - 50;
            int y_pos = Math.round(imgOri.height() / 2) - 50;
            Rect r = new Rect(x_pos, y_pos, 100, 100);
            Mat image_roi = new Mat(imgOri, r);
            Highgui.imwrite("image_sample.png", image_roi);
        } catch (Exception e) {
            writeLog(e.toString());
            JOptionPane.showMessageDialog(null, "Image object resolution is less then 100x100 px,\n Chose another image for beter result");
        }
    }

    public void convertImage2HSV() {
        try {
            //Convert to HSV
            Mat rgb = Highgui.imread("image_object.png");
            Mat hsv = new Mat();
            Imgproc.cvtColor(rgb, hsv, Imgproc.COLOR_RGB2HSV);
            Highgui.imwrite("image_hsv.png", hsv);
            System.out.println("Image has been saved with name image_hsv.jpg");
            File fileHSV = new File("image_hsv.png");
            imageHSV = ImageIO.read(fileHSV);

            // Show HSV Image To Panel
            Graphics g0 = panel_h.getGraphics();
            g0.drawImage(imageHSV, 0, 0, 320, 240, 0, 0, imageHSV.getWidth(), imageHSV.getHeight(), null);
        } catch (IOException ex) {
            Logger.getLogger(ui_main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public double[] RGBtoHSV() {
        double[] result = new double[3];
        Mat rgb = Highgui.imread("image_sample.png"); //BIG QUESTION MARK      <<<<================================================================
        Double[][] listHSV = new Double[rgb.height() * rgb.width()][3];
        double h, s, v;
        int index = 0;
        for (int j = 0; j < rgb.height(); j++) {
            for (int i = 0; i < rgb.width(); i++) {
                h = 0;
                s = 0;
                v = 0;
                double[] rgbVal = rgb.get(j, i);
                //System.out.println("Red= " + rgbVal[2] + " , Green= " + rgbVal[1] + " , Blue= " + rgbVal[0] + "");
                double maxColor = Math.max(rgbVal[2], rgbVal[1]);
                maxColor = Math.max(maxColor, rgbVal[0]);
                double minColor = Math.min(rgbVal[2], rgbVal[1]);
                minColor = Math.min(minColor, rgbVal[0]);
                double delta = maxColor - minColor;
                //System.out.println("max Val = " + maxColor);
                //System.out.println("min Val = " + minColor);

                //Calculate Value
                v = (maxColor / 255) * 100;
                listHSV[index][2] = v;

                //Calculate Saturation Value
                if (v == 0) {
                    s = 0;
                } else {
                    s = ((maxColor - minColor) / maxColor) * 100;
                }
                listHSV[index][1] = s;

                //Calculate Hue Value
                if (s == 0) {
                    h = 0;
                } else if (rgbVal[2] == maxColor) {
                    h = 60 * ((rgbVal[1] - rgbVal[0]) / delta);
                } else if (rgbVal[1] == maxColor) {
                    h = 60 * (2 + ((rgbVal[0] - rgbVal[2]) / delta));
                } else if (rgbVal[0] == maxColor) {
                    h = 60 * (4 + ((rgbVal[2] - rgbVal[1]) / delta));
                }
                if (h < 0) {
                    h += 360;
                }
                listHSV[index][0] = h;
                index++;
            }
        }
        //Rata-rata H, S, dan V
        double sH = 0.0;
        double sS = 0.0;
        double sV = 0.0;
        for (int i = 0; i < listHSV.length; i++) {
            sH += listHSV[i][0];
            sS += listHSV[i][1];
            sV += listHSV[i][2];
        }

        result[0] = sH / listHSV.length;
        result[1] = sS / listHSV.length;
        result[2] = sV / listHSV.length;
        txt_knn.append(">Rata-rata H = " + result[0] + "\n");
        txt_knn.append(">Rata-rata S = " + result[1] + "\n");
        txt_knn.append(">Rata-rata V = " + result[2] + "\n\n");
        txt_svm.append(">Rata-rata H = " + result[0] + "\n");
        txt_svm.append(">Rata-rata S = " + result[1] + "\n");
        txt_svm.append(">Rata-rata V = " + result[2] + "\n\n");

        return result;
    }

    public void KNearestNeighborMethod(int rank) {
        ExecutionManager e = new ExecutionManager();
        String mode = "";
        if (rd_kupas.isSelected()) {
            mode = rd_kupas.getText();
        } else {
            mode = rd_belumkupas.getText();
        }

        //Get All The Data
        List<mangga> listMangga = e.getAllDataTraining(mode);

        //Find Square Distance
        //double[] sDis = new double[listMangga.size()];
        //int counter = 0;
        for (mangga lm : listMangga) {
            lm.setSquareDistance(Math.pow((lm.getH() - h_test), 2) + Math.pow((lm.getS() - s_test), 2) + Math.pow((lm.getV() - v_test), 2));
        }

        //Sort By Rank
        listMangga.sort(Comparator.comparingDouble(mangga::getSquareDistance));

//        Show List That Has Been Ranked
//        for (mangga lm : listMangga) {
//            System.out.print("Kategori = " + lm.getKategori());
//            System.out.print(" H = "+lm.getH());
//            System.out.print(" S = "+lm.getS());
//            System.out.print(" V = "+lm.getV());
//            System.out.println(" Square Distance = "+lm.getSquareDistance());
//        }
//        System.out.println("----------------------------------");
        //Classified
        int manis = 0;
        int sedang = 0;
        int belum = 0;
        for (int i = 0; i < rank; i++) {
//            System.out.println(listMangga.get(i).getKategori());
            if (listMangga.get(i).getKategori().equals("Manis")) {
                manis++;
            } else if (listMangga.get(i).getKategori().equals("Sedang")) {
                sedang++;
            } else if (listMangga.get(i).getKategori().equals("Belum Manis")) {
                belum++;
            }
            if (i == 0) {
                txt_knn.append(">Nilai Brix Terdekat : " + listMangga.get(i).getBrix() + "\n\n");
            }
        }
        System.out.println(manis + " ---- " + sedang + " ---- " + belum);
        if (manis >= sedang && manis >= belum) {
            txt_knn.append(">Tingkat Kemanisan = Manis\n");
        } else if (sedang >= manis && sedang >= belum) {
            txt_knn.append(">Tingkat Kemanisan = Sedang\n");
        } else if (belum >= sedang && belum >= manis) {
            txt_knn.append(">Tingkat Kemanisan = Belum Manis\n");
        }

    }

    public void SupportVectorMachineMethod() {
        //Get  Data Training
        ExecutionManager e = new ExecutionManager();
        String mode = "";
        if (rd_kupas.isSelected()) {
            mode = rd_kupas.getText();
        } else {
            mode = rd_belumkupas.getText();
        }
        //Get All The Data
        List<mangga> listMangga = e.getAllDataTraining(mode);

        double[] H = new double[listMangga.size()];
        double[] S = new double[listMangga.size()];
        double[] V = new double[listMangga.size()];
        int[] Y = new int[listMangga.size()];
        int i = 0;
        for (mangga m : listMangga) {
            H[i] = m.getH();
            S[i] = m.getS();
            V[i] = m.getV();
            if (m.getKategori().equals("Manis")) {
                Y[i] = 2;
            } else if (m.getKategori().equals("Sedang")) {
                Y[i] = 1;
            } else {
                Y[i] = 0;
            }
            i++;
        }
        //Find Support Vector
        //Find Hyperlane
        //Clasified

        //Array H
        String tempH = Arrays.toString(H).replace("[", "").replace(",", "").replace("]", "");
        //Array S
        String tempS = Arrays.toString(S).replace("[", "").replace(",", "").replace("]", "");
        //Array V
        String tempV = Arrays.toString(V).replace("[", "").replace(",", "").replace("]", "");
        //Array Y (Kategori)
        String tempY = Arrays.toString(Y).replace("[", "").replace(",", "").replace("]", "");

        //SVM Alternative V1
//        int[] svm = new int[3];
//        //H vs S
//        svm[0] = getAlternateSVM(H.length, tempH, tempS, tempY, h_test, s_test);
//        //S vs V
//        svm[1] = getAlternateSVM(S.length, tempS, tempV, tempY, s_test, v_test);
//        //H vs V
//        svm[2] = getAlternateSVM(H.length, tempH, tempV, tempY, h_test, v_test);
//        
//        //Determine Class
//        int manis = 0;
//        int sedang = 0;
//        int belum = 0;
//        for (int t : svm) {
//            if(t == 0){
//                belum++;
//            }else if(t == 1){
//                sedang++;
//            }else{
//                manis++;
//            }
//        }
//        
////        System.out.println(manis + " ---- " + sedang + " ---- " + belum);
////        if (manis >= sedang && manis >= belum) {
////            txt_svm.append(">Tingkat Kemanisan = Manis\n");
////        } else if (sedang >= manis && sedang >= belum) {
////            txt_svm.append(">Tingkat Kemanisan = Sedang\n");
////        } else if (belum >= sedang && belum >= manis) {
////            txt_svm.append(">Tingkat Kemanisan = Belum Manis\n");
////        }
        //SVM Alternative V2
        int svm = getAlternateSVMv2(H.length, tempH, tempS, tempV, tempY, h_test, s_test, v_test);
        if (svm == 0) {
            txt_svm.append(">Tingkat Kemanisan = Belum Manis\n");
        } else if (svm == 1) {
            txt_svm.append(">Tingkat Kemanisan = Sedang\n");
        } else {
            txt_svm.append(">Tingkat Kemanisan = Manis\n");
        }
    }

    public int getAlternateSVMv2(int length, String X1, String X2, String X3, String Y, double Q1, double Q2, double Q3) {
        int result = 0;
        //Alternative SVM (SVM.py is Under development)
        try {
            Process p = Runtime.getRuntime().exec("python SVM.py " + length + " " + Q1 + " " + Q2 + " " + Q3 + " " + X1 + " " + X2 + " " + X3 + " " + Y);
            String s = null;
            BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
            while ((s = stdInput.readLine()) != null) {
                result = Integer.parseInt(s.replace("[", "").replace("]", ""));
            }
        } catch (IOException ex) {
            Logger.getLogger(ui_main.class.getName()).log(Level.SEVERE, null, ex);
            writeLog(ex.toString());
            JOptionPane.showMessageDialog(null, "There is a problem with SVM Method, Check the error log");
        }
        return result;
    }

    public int getAlternateSVM(int length, String X1, String X2, String Y, double Q1, double Q2) {
        int result = 0;
        //Alternative SVM (SVM.py is Under development)
        try {
            Process p = Runtime.getRuntime().exec("python SVM.py " + length + " " + Q1 + " " + Q2 + " " + X1 + " " + X2 + " " + Y);
            String s = null;
            BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
            while ((s = stdInput.readLine()) != null) {
                result = Integer.parseInt(s.replace("[", "").replace("]", ""));
            }
        } catch (IOException ex) {
            Logger.getLogger(ui_main.class.getName()).log(Level.SEVERE, null, ex);
            writeLog(ex.toString());
            JOptionPane.showMessageDialog(null, "There is a problem with SVM Method, Check the error log");
        }
        return result;
    }

    public void logFileConfig() {
        File tmpDir = new File("log.txt");
        boolean exists = tmpDir.exists();
        if (!exists) {
            String filename = "log.txt";
            try {
                PrintWriter outputStream = new PrintWriter(filename);
                outputStream.println("LOG FILE");
                outputStream.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ui_main.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "There is a problem with configuration log file");
            }
        }
    }

    public void writeLog(String m) {
        try (FileWriter fw = new FileWriter("log.txt", true);
                BufferedWriter bw = new BufferedWriter(fw);
                PrintWriter out = new PrintWriter(bw)) {
            Timestamp timestamp = new Timestamp(System.currentTimeMillis());
            out.println(timestamp + " - " + m);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "There is a problem when write to log file");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ui_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ui_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ui_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ui_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ui_main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bntGroupModelBuah;
    private javax.swing.JButton btn_browse;
    private javax.swing.JButton btn_capture;
    private javax.swing.JButton btn_dataTraining;
    private javax.swing.JButton btn_execKNN;
    private javax.swing.JButton btn_execSVM;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panel_cropped;
    private javax.swing.JPanel panel_h;
    private javax.swing.JPanel panel_image;
    private javax.swing.JRadioButton rd_belumkupas;
    private javax.swing.JRadioButton rd_kupas;
    private javax.swing.JTextArea txt_knn;
    private javax.swing.JTextArea txt_svm;
    // End of variables declaration//GEN-END:variables
}
